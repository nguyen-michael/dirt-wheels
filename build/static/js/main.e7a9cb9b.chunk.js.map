{"version":3,"sources":["components/Results/Results.jsx","components/Search/Dropdown.jsx","components/Search/Search.jsx","App.jsx","index.jsx"],"names":["Results","resultsArray","this","props","results","map","wheel","index","bgColor","key","_id","className","stockID","size","rimMaterial","rimName","hubName","hubSpacing","brake","spokeLengthNDS","spokeLengthDS","notes","Component","Dropdown","optionsArray","options","item","value","htmlFor","name","label","onChange","handleChange","Search","dropdownsArray","dropdowns","dropdown","action","type","onClick","handleSubmit","handleReset","dropdownSettings","App","state","searchQuery","bind","e","preventDefault","requestUrl","Object","entries","forEach","entry","fetch","method","then","res","json","found","setState","target","newSearchQuery","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7a9cb9b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Results extends Component {\r\n    render() {\r\n        // var to global scope this variable to be used in the render return.\r\n        const resultsArray = this.props.results.map((wheel, index) => {\r\n            let bgColor = \"bg-gray-200\";\r\n            if (index % 2 === 0) {\r\n                bgColor = \"bg-transparent\"\r\n            }\r\n\r\n            return (\r\n                <tr key={wheel._id} className={bgColor}>\r\n                    <td className=\"border px-4 py-2\">{wheel.stockID}</td>\r\n                    <td className=\"border px-4 py-2\">{wheel.size}</td>\r\n                    <td className=\"border px-4 py-2\">{wheel.rimMaterial}</td>\r\n                    <td className=\"border px-4 py-2\">{wheel.rimName}</td>\r\n                    <td className=\"border px-4 py-2\">{wheel.hubName}</td>\r\n                    <td className=\"border px-4 py-2\">{wheel.hubSpacing}</td>\r\n                    <td className=\"border px-4 py-2\">{wheel.brake}</td>\r\n                    <td className=\"border px-4 py-2\">{wheel.spokeLengthNDS}</td>\r\n                    <td className=\"border px-4 py-2\">{wheel.spokeLengthDS}</td>\r\n                    <td className=\"border px-4 py-2\">{wheel.notes}</td>\r\n                </tr>\r\n            );\r\n        });\r\n\r\n\r\n        return (\r\n            <table className=\"table-auto\">\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"text-gray-800 px-4 py-2\">Stock ID</th>\r\n                        <th className=\"text-gray-800 px-4 py-2\">Size</th>\r\n                        <th className=\"text-gray-800 px-4 py-2\">Rim Material</th>\r\n                        <th className=\"text-gray-800 px-4 py-2\">Rim Name</th>\r\n                        <th className=\"text-gray-800 px-4 py-2\">Hub Name</th>\r\n                        <th className=\"text-gray-800 px-4 py-2\">Hub Spacing</th>\r\n                        <th className=\"text-gray-800 px-4 py-2\">Brake</th>\r\n                        <th className=\"text-gray-800 px-4 py-2\">Spoke Length NDS</th>\r\n                        <th className=\"text-gray-800 px-4 py-2\">Spoke Length DS</th>\r\n                        <th className=\"text-gray-800 px-4 py-2\">Notes</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {resultsArray}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Results;","import React, { Component } from 'react';\r\n\r\nclass Dropdown extends Component {\r\n    render() {\r\n        const optionsArray = this.props.options.map(item => {\r\n            return <option value={item} key={item}>{item}</option>\r\n        });\r\n\r\n        return (\r\n            <div className=\"flex flex-col flex-1\">\r\n                <label\r\n                    htmlFor={this.props.name}\r\n                >\r\n                    <p className=\"font-semibold text-gray-800 text-center px-4 py-2\">\r\n                        {this.props.label}\r\n                    </p>\r\n                </label>\r\n                <select\r\n                    name={this.props.name}\r\n                    onChange={this.props.handleChange}\r\n                    className=\"border-b-2 mx-2 px-2 bg-gray-200 focus:outline-none focus:bg-white\"\r\n                >\r\n                    {optionsArray}\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dropdown;","import React, { Component } from 'react';\r\nimport Dropdown from './Dropdown';\r\n\r\nclass Search extends Component {\r\n\r\n    render() {\r\n        const dropdownsArray = this.props.dropdowns.map(dropdown => {\r\n            return <Dropdown\r\n                label={dropdown.label}\r\n                name={dropdown.name}\r\n                options={dropdown.options}\r\n                key={dropdown.name}\r\n                handleChange={this.props.handleChange}\r\n            />\r\n        });\r\n\r\n        return (\r\n            <form\r\n                className=\"flex flex-row my-6\"\r\n                action=\"\"\r\n            >\r\n                {dropdownsArray}\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Search\"\r\n                    onClick={this.props.handleSubmit}\r\n                    className=\"\r\n                        flex-1 \r\n                        hover:bg-gray-300 \r\n                        bg-gray-800\r\n                        hover:text-gray-800\r\n                        text-white\r\n                        font-bold\r\n                        border\r\n                        border-gray-400\r\n                        rounded\r\n                \"\r\n                />\r\n                <input\r\n                    type=\"reset\"\r\n                    value=\"Clear All\"\r\n                    onClick={this.props.handleReset}\r\n                    className=\"\r\n                        flex-1 \r\n                        hover:bg-red-300 \r\n                        bg-red-800\r\n                        text-white\r\n                        hover:text-gray-800\r\n                        font-bold\r\n                        border\r\n                        border-gray-400\r\n                        rounded\r\n                    \"\r\n                />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\nimport Results from './components/Results/Results';\nimport Search from './components/Search/Search';\n\n// Preseed data for dropdown boxes\nconst dropdownSettings = [\n    {\n        label: \"Stock ID\",\n        name: \"stockID\",\n        options: ['', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    },\n    {\n        label: \"Wheel Size\",\n        name: \"size\",\n        options: [\"\", \"27.5\", \"29\"]\n    },\n    {\n        label: \"Rim Material\",\n        name: \"rimMaterial\",\n        options: [\"\", \"Alloy\", \"Carbon\"]\n    },\n    {\n        label: \"Rim Name\",\n        name: \"rimName\",\n        options: [\"\", \"RC30\", \"RC36\", \"XC\", \"DE40\"]\n    },\n    {\n        label: \"Hub Name\",\n        name: \"hubName\",\n        options: [\"\", \"Dirt\", \"i9 Hydra\", \"i9 1/1\", \"i9 Torch\"]\n    },\n    {\n        label: \"Hub Spacing\",\n        name: \"hubSpacing\",\n        options: [\"\", \"100\", \"110\", \"135/142\", \"148\"]\n    },\n    {\n        label: \"Brake\",\n        name: \"brake\",\n        options: [\"\", \"6B\", \"CL\"]\n    }\n]\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            results: [],\n            searchQuery: {\n                stockID: \"\",\n                size: \"\",\n                rimMaterial: \"\",\n                rimName: \"\",\n                hubName: \"\",\n                hubSpacing: \"\",\n                brake: \"\"\n            }\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        // console.log(`Submit clicked, search query is \\n ${JSON.stringify(this.state.searchQuery, null, 4)}`);\n\n        let requestUrl = '/wheels/search/?';\n\n        Object.entries(this.state.searchQuery).forEach(entry => {\n            // If empty string, exclude from search functionality\n            // That is: Empty string is wildcard.\n            if (entry[1] !== \"\") {\n                requestUrl = requestUrl + entry[0] + \"=\" + entry[1] + \"&\";\n            }\n        });\n\n        // console.log(`Our Request body is \\n ${JSON.stringify(requestBody, null, 4)}`);\n        // console.log(requestUrl);\n\n        const requestParameters = {\n            method: 'GET'\n        };\n\n        fetch(requestUrl, requestParameters)\n            .then(res => res.json())\n            .then(found => this.setState({\n                results: found\n            }));\n    }\n\n    handleChange(e) {\n        // Change the state in here!\n        // Collect previous state to avoid complete overwrite\n        // console.log(`The ${e.target.name} dropdown was changed to ${e.target.value}!`);\n\n        let name = e.target.name;\n        let value = e.target.value;\n\n        const newSearchQuery = this.state.searchQuery\n        newSearchQuery[name] = value\n\n        this.setState({ searchQuery: newSearchQuery });\n    }\n\n    handleReset(e) {\n        this.setState({\n            searchQuery: {\n                stockID: \"\",\n                size: \"\",\n                rimMaterial: \"\",\n                rimName: \"\",\n                hubName: \"\",\n                hubSpacing: \"\",\n                brake: \"\"\n            }\n        });\n    }\n\n    /*   Testing get all wheel data on-load. Proxy functional!\n      componentDidMount() {\n        fetch('/wheels')\n          .then(res => res.json())\n          .then(wheels => this.setState({ wheels }));\n      } */\n\n    render() {\n        return (\n            <div>\n                <h1 className=\"text-4xl  text-center text-gray-800 my-8\">\n                    DIRT COMPONENTS WHEEL DIRECTORY\n                </h1>\n                <Search\n                    dropdowns={dropdownSettings}\n                    handleSubmit={this.handleSubmit}\n                    handleChange={this.handleChange}\n                    handleReset={this.handleReset}\n                />\n                {this.state.results.length === 0 ? <p className=\"text-center font-bold\">No wheels found</p>: <Results results={this.state.results} />}\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}